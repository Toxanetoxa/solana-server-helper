name: CI/CD

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: read
    packages: write

concurrency:
    group: deploy-${{ github.ref }}
    cancel-in-progress: true

env:
    REGISTRY: ghcr.io
    IMAGE: ghcr.io/toxanetoxa/solana-server-helper # ghcr.io/owner/repo (должно быть в нижнем регистре)

jobs:
    quality:
        name: Quality Checks
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9
                  run_install: false

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: pnpm
                  cache-dependency-path: pnpm-lock.yaml

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run ESLint
              run: pnpm run lint

            - name: Run TypeScript typecheck
              run: pnpm run typecheck

            - name: Run unit & integration tests
              run: pnpm run test

            - name: Ensure project builds
              run: pnpm run build

    build:
        name: Build & Publish Image
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        needs: quality
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up QEMU (optional for multi-arch)
              uses: docker/setup-qemu-action@v3

            - name: Set up Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build & Push image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: docker/Dockerfile
                  push: true
                  tags: |
                      ${{ env.IMAGE }}:latest
                      ${{ env.IMAGE }}:${{ github.sha }}
                  # platforms: linux/amd64  # раскомментируй, если нужен multi-arch

    prepare-deploy:
        name: Prepare Remote Host
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        needs: build
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Ensure deploy directory exists
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 49274
                  script: |
                      set -euxo pipefail
                      mkdir -p ${{ secrets.DEPLOY_PATH }}
                      mkdir -p ${{ secrets.DEPLOY_PATH }}/redis-data
                      rm -f ${{ secrets.DEPLOY_PATH }}/docker-compose.yml || true

            - name: Upload compose file
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 49274
                  source: docker-compose.yml
                  target: ${{ secrets.DEPLOY_PATH }}/

            - name: Upload prod compose file
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 49274
                  source: docker-compose.prod.yml
                  target: ${{ secrets.DEPLOY_PATH }}/

    deploy:
        name: Rollout Containers
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        needs: prepare-deploy
        steps:
            - name: Prepare runtime artifacts
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 49274
                  script: |
                      bash <<'BASH'
                      set -euxo pipefail
                      cd ${{ secrets.DEPLOY_PATH }}
                      export NVM_DIR="$HOME/.nvm"
                      mkdir -p "$NVM_DIR"
                      if [ ! -s "$NVM_DIR/nvm.sh" ]; then
                        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
                      fi
                      # shellcheck disable=SC1091
                      . "$NVM_DIR/nvm.sh"
                      if [ -f .nvmrc ]; then
                        TARGET_NODE=$(cat .nvmrc)
                      else
                        TARGET_NODE=22.18.0
                      fi
                      nvm install "$TARGET_NODE" --no-progress > /dev/null
                      nvm use "$TARGET_NODE" > /dev/null
                      if ! command -v pnpm >/dev/null 2>&1; then
                        corepack enable || true
                        corepack prepare pnpm@9.12.3 --activate || npm install -g pnpm
                      else
                        corepack enable || true
                      fi
                      pnpm install --frozen-lockfile || pnpm install
                      pnpm run build
                      pnpm prune --prod
                      BASH

            - name: Deploy containers
              uses: appleboy/ssh-action@v1.2.0
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  port: 49274
                  script: |
                      set -euxo pipefail
                      cd ${{ secrets.DEPLOY_PATH }}
                      export IMAGE=${{ env.IMAGE }}:${{ github.sha }}
                      docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
                      docker compose -f docker-compose.prod.yml pull
                      docker compose -f docker-compose.prod.yml up -d --remove-orphans
                      docker image prune -f
